Goroutines and Channels Introduction
Golang Tech Talks series
12 Feb 2020
Tags: golang, goroutine, channels

Obed N Munoz
Cloud Software Engineer
obed.n.munoz@gmail.com
http://obedmr.com
@_obedmr


* Based on:
.link http://techbus.safaribooksonline.com/book/programming/go/9780134190570 The Go Programming Language Book

*Presentation* *code* *and* *examples:*
.link https://github.com/CodersSquad/hello-gophers https://github.com/CodersSquad/hello-gophers

* Goroutines and Channels

Concurrent programming is the expression of a program as a composition of several autonomous activities.

Golang provides 2 styles of concurrent programming:

- *CSP* - Communicating Sequential Processes
- Shared Memory multithreading


* Goroutines

In Go, each concurrently executing activity is called a _goroutine_.

When a program starts, its only goroutine is the one that calls the main function. It's called the _main_goroutine_.

  f()       // call f(); wait for it to return
  go f()    // create a new goroutine that calls f(); don't wait

 
* Example 1 - spinner (1/2)

.link https://github.com/CodersSquad/hello-gophers/blob/master/src/spinner.go spinner.go
 
.play src/spinner.go  /^func main/,/^}/

.code src/spinner.go  /^func fib/,/^}/


* Example 1 - spinner (2/2)

.code src/spinner.go /^func spinner/,/^}/


* Example 2 - Concurrent Clock Server (1/4)

.link https://github.com/CodersSquad/hello-gophers/blob/master/src/clock1.go clock1.go

.play src/clock1.go  /^func main/,/^}/

* Example 2 - Concurrent Clock Server (2/4)

.code src/clock1.go  /^func handleConn/,/^}/

.play src/netcat.sh


* Example 2 - Concurrent Clock Server (3/4)

.link https://github.com/CodersSquad/hello-gophers/blob/master/src/netcat1.go netcat1.go

.play src/netcat1.go /^func main/,/^}/

.code src/netcat1.go /^func mustCopy/,/^}/


* Example 2 - Concurrent Clock Server (4/4)

This is the real *concurrent* one

.link https://github.com/CodersSquad/hello-gophers/blob/master/src/clock2.go clock2.go

.play src/clock2.go /^func main/,/^}/


* Let's philosophize

.link https://go-proverbs.github.io/ Go Proverbs

- Don't communicate by _sharing_ _memory_, _share_ _memory_ by communicating.

- _Concurrency_ is not _parallelism_.

- _Channels_ orchestrate; _mutexes_ serialize.

* Channels

If goroutines are the activities of a concurrent Go program, *channels* are the connections between them.

- A *channel* is a communication mechanism that lets one goroutine send values to another goroutine.

- A *channel* is a _reference_ to the data structure created by _make_

- A *channel* has 2 operations, _send_ and _receive_, also known as _communications_.


  ch := make(chan int) // ch has type 'chan int'

  ch <- x  // a send statement

  x = <-ch // a receive expression in an assignment statement
  <-ch     // a receive statement; result is discarded

  close(ch) // To close a channel

* Unbuffered and Buffered Channels

Channels created with simple _make_ is called as _unbuffered_channel_.

But _make_ could use a second parameter which indicates the channel's _capacity_. If this _capacity_ is non-zero, _make_ will created a _buffered_ channel.

  ch = make(chan int)    // unbuffered channel
  ch = make(chan int, 0) // unbuffered channel
  ch = make(chan int, 3) // buffered channel with capacity 3

* Example 3 - Unbuffered Channels

.link https://github.com/CodersSquad/hello-gophers/blob/master/src/netcat2.go netcat2.go
 
.play src/netcat2.go  /^func main/,/^}/

* Pipelines

Pipelines are used to connect goroutines together so that the output of one can be the input to another.

.image src/pipeline.png

* Example 4 - Pipelines (1/2)

.link https://github.com/CodersSquad/hello-gophers/blob/master/src/pipeline.go pipeline.go
 
.play src/pipeline.go  /^func main/,/^}/

* Example 4 - Pipelines (2/2)

.link https://github.com/CodersSquad/hello-gophers/blob/master/src/pipeline.go pipeline.go
 
.code src/pipeline.go  /^func counter/,/^}/
 
.code src/pipeline.go  /^func squarer/,/^}/


* Let's code: ClockWall

Follow the link that matches with your current class:

- Advanced Programming
[[http://classify.obedmr.com/get-lab/ap-labs/clockwall]]

- Distributed Computing
[[http://classify.obedmr.com/get-lab/dc-labs/clockwall]]


* More topics for second part

- Buffered and Unbuffered channels
- Pipelines
- Unidirectional Channel types
- Looping in Parallel
- Cancellation
- *Concurrency*with*Shared*Variables* (third part)

_Take_a_look_in_the_book_
.link http://techbus.safaribooksonline.com/book/programming/go/9780134190570 The Go Programming Language Book
